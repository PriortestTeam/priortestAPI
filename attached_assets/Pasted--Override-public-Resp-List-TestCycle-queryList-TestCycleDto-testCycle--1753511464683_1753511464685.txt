//
//    @Override
//    public Resp<List<TestCycle>> queryList(TestCycleDto testCycle) {
//        testCycle.queryListVerify();
//        String masterId = jwtUserService.getMasterId();
//        testCycle.setUserId(masterId);
//
//        testCycle.setFilter(queryFilterService.mysqlFilterProcess(testCycle.getViewTreeDto(), masterId));
//
//        List<TestCycle> select = testCycleDao.queryAll(testCycle);
//        return new Resp.Builder<List<TestCycle>>().setData(select).total(select).ok();
//    }
//
//    /**
//     * update customfiled
//     *
//     * @Param: [testCycle]
//     * @return: com.hu.oneclick.model.base.Resp<java.lang.String>
//     * @Author: MaSiyi
//     * @Date: 2021/12/27
//     */
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> insert(TestCycle testCycle) {
//        try {
//            //验证参数
//            testCycle.verify();
//            //验证是否存在
//            verifyIsExist(testCycle.getTitle(), testCycle.getProjectId());
//            testCycle.setUserId(jwtUserService.getMasterId());
//            testCycle.setAuthorName(jwtUserService.getUserLoginInfo().getSysUser().getUserName());
//            Date date = new Date();
//            testCycle.setCreateTime(date);
//            testCycle.setUpdateTime(date);
//            int insertFlag = testCycleDao.insert(testCycle);
//            if (insertFlag > 0) {
//                List<CustomFieldData> customFieldDatas = testCycle.getCustomFieldDatas();
//                insertFlag = customFieldDataService.insertTestCycleCustomData(customFieldDatas, testCycle);
//            }
//            return Result.addResult(insertFlag);
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#insert,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
//    }
//
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> update(TestCycle testCycle) {
//        try {
//            //验证是否存在
//            verifyIsExist(testCycle.getTitle(), testCycle.getProjectId());
//            testCycle.setUserId(jwtUserService.getMasterId());
//            //新增修改字段记录
//            modifyRecord(testCycle);
//            return Result.updateResult(testCycleDao.update(testCycle));
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#update,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
//    }
//
//
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> delete(String id) {
//        try {
//            TestCycle testCycle = new TestCycle();
//            testCycle.setId(id);
//            return Result.deleteResult(testCycleDao.delete(new LambdaQueryWrapper<TestCycle>().eq(TestCycle::getId, id)));
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#delete,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
//    }
//
//
//    @Override
//    public Resp<List<TestCase>> queryBindCaseList(String testCycleId) {
//        List<TestCase> select = testCycleJoinTestCaseDao.queryBindCaseList(testCycleId);
//        return new Resp.Builder<List<TestCase>>().setData(select).total(select).ok();
//    }
//
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> bindCaseInsert(TestCycleJoinTestCase testCycleJoinTestCase) {
//        try {
//            List<TestCycleJoinTestCase> select = testCycleJoinTestCaseDao.queryList(testCycleJoinTestCase);
//            if (select != null && select.size() > 0) {
//                throw new BizException(SysConstantEnum.DATE_EXIST.getCode(), "测试用例" + SysConstantEnum.DATE_EXIST.getValue());
//            }
//            int count = 0; //计数
//            TestCycle testCycle = new TestCycle();
//            List<String> strings = testCycleJoinTestCaseDao.queryTestCycleStatus(testCycleJoinTestCase.getTestCycleId());
//            for (String s : strings) {
//                if ("0".equals(s)) {
//                    count++;
//                }
//            }
//            //如果全部为0 表示都没运行，所以记录 未运行状态，1 已执行但为执行外状态
//            testCycle.setStatus(count == strings.size() ? 0 : 1);
//            testCycle.setId(testCycleJoinTestCase.getTestCycleId());
//            return Result.updateResult(testCycleJoinTestCaseDao.insert(testCycleJoinTestCase), testCycleDao.update(testCycle));
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#bindCaseInsert,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
//    }
//
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> bindCaseDelete(String testCaseId) {
//        try {
//            return Result.deleteResult(testCycleJoinTestCaseDao.bindCaseDelete(testCaseId));
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#bindCaseDelete,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
//    }
//
//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public Resp<String> executeTestCase(ExecuteTestCaseDto executeTestCaseDto) {
//        String userId = jwtUserService.getMasterId();
//        Date date = new Date();
//        int testCycleStatus; //执行过
//        int testCycleRunStatus; //失败
//        int count = 0;
//        boolean flag = executeTestCaseDto.getStepStatus() == 2; //查看当前步骤用户选择成功还是失败
//        try {
//            //1 修改test case 最后一次执行的状态
//            //TestCase testCase = new TestCase();
//            //testCase.setId(executeTestCaseDto.getTestCaseId());
//            //testCase.setLastRunStatus(executeTestCaseDto.getStepStatus());
//            //testCase.setExecutedDate(date);
//            //testCase.setUserId(userId);
//            //2 判断是否所有的test case 都被执行过，全部执行过后修改 test cycle 的status 为 complete
//            List<Map<String, String>> select = testCycleJoinTestCaseDao.queryBindCaseRunStatus(executeTestCaseDto.getTestCycleId());
//            for (Map<String, String> map : select) {
//                //查看执行状态,1 为已运行，为 1 计数加1 count 数等于 list 查询结果数则表示全部已执行过
//                if ("1".equals(map.get("executeStatus"))) {
//                    count++;
//                }
//                //3 判断test cycle 下边的 testcase 是否都执行成功，凡有一个失败 则状态为失败
//                if (flag) {
//                    String runStatus = map.get("runStatus");
//                    if (runStatus != null) {
//                        String[] split = runStatus.split(",");
//                        for (String s : split) {
//                            if (!"2".equals(s)) {
//                                flag = false;
//                                break;
//                            }
//                        }
//                    }
//                }
//            }
//            //状态2 为已执行完，1 为未执行完
//            testCycleStatus = count == select.size() ? 2 : 1;
//            testCycleRunStatus = flag ? 2 : 1;
//            TestCycle testCycle = new TestCycle();
//            testCycle.setId(executeTestCaseDto.getTestCycleId());
//            testCycle.setRunStatus(testCycleRunStatus);
//            testCycle.setStatus(testCycleStatus);
//            testCycle.setLastRunDate(date);
//            testCycle.setUserId(userId);
//            //4 步骤状态
//            TestCaseStep testCaseStep = new TestCaseStep();
//            //testCaseStep.setId(executeTestCaseDto.getTestCaseStepId());
//            //testCaseStep.setTestCaseId(executeTestCaseDto.getTestCaseId());
//            //testCaseStep.setTestDate(date);
//            //testCaseStep.setStatus(executeTestCaseDto.getStepStatus());
//            //testCaseStep.setActualResult(executeTestCaseDto.getActualResult());
//            //开始更新
//            //return Result.updateResult(testCycleDao.update(testCycle),
//            //        testCaseDao.update(testCase),
//            //        testCaseStepDao.update(testCaseStep));
//        } catch (BizException e) {
//            logger.error("class: TestCycleServiceImpl#executeTestCase,error []" + e.getMessage());
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return new Resp.Builder<String>().buildResult(e.getCode(), e.getMessage());
//        }
////        try {
////            // 当前用户下，当前测试周期下的当前测试用例前面步骤是否有执行失败的
////            TestCaseStep testCaseStep = new TestCaseStep();
////            testCaseStep.setId(executeTestCaseDto.getTestCaseStepId());
////            testCaseStep.setTestCaseId(executeTestCaseDto.getTestCaseId());
////            testCaseStep.setUserId(userId);
////            testCaseStep.setTestCycleId(executeTestCaseDto.getTestCycleId());
////            int count = 0;
////            count = testCaseStepDao.queryCount(testCaseStep);
////            if (count > 0 ) {
////                throw new BizException("","当前测试用例有执行失败步骤，不可继续执行");
////            }
////
////
////            // TODO 将该用例此步骤后面的步骤都置为未执行状态 如果返回ccount=1则代表后面还有步骤
////            int ccount = 0;
////
////            // 更新测试周期和测试用例关联信息表
////            TestCycleJoinTestCase testCycleJoinTestCase = new TestCycleJoinTestCase();
////            if (flag) {
////                if (ccount == 1) { // 执行成功但未完成
////                    testCycleJoinTestCase.setExecuteStatus("1");// 0:未执行 1:未完成  2:执行完成
////                    testCycleJoinTestCase.setRunStatus("2");// 执行成功 0:未执行 1:执行失败 2:执行成功
////                } else {// 执行成功且完成
////                    testCycleJoinTestCase.setExecuteStatus("2");// 0:未执行 1:未完成  2:执行完成
////                    testCycleJoinTestCase.setRunStatus("2");// 执行成功 0:未执行 1:执行失败 2:执行成功
////                }
////            } else {
////                testCycleJoinTestCase.setExecuteStatus("2");// 0:未执行 1:未完成  2:执行完成
////                testCycleJoinTestCase.setRunStatus("1");// 执行成功 0:未执行 1:执行失败 2:执行成功
////            }
////            //testCycleJoinTestCase.setExecuteStatus(StringUtil.isEmpty(String.valueOf(executeTestCaseDto.getStepStatus())) ? "0" : String.valueOf(executeTestCaseDto.getStepStatus()));
////            testCycleJoinTestCase.setTestCaseId(executeTestCaseDto.getTestCaseId());
////            testCycleJoinTestCase.setTestCycleId(executeTestCaseDto.getTestCycleId());
////            testCycleJoinTestCaseDao.update(testCycleJoinTestCase);
////
////            int testCycleRunStatus = 2;// test_cycle默认执行状态为成功 0:未执行 1:执行失败 2:执行成功
////            int testCycleStatus = 1;// test_cycle默认状态为完成 0:未执行 1:未完成  2:执行完成
////            // 查询test_cycle_join_test_case表该周期下所有用例的执行状态
////            testCycleJoinTestCase.setExecuteStatus(null);// 查询条件去掉状态
////            testCycleJoinTestCase.setTestCaseId(null);
////            List<TestCycleJoinTestCase> list = testCycleJoinTestCaseDao.queryList(testCycleJoinTestCase);
////            if (flag) {// 该测试用例当前步骤执行成功
////                for(TestCycleJoinTestCase testCJTC : list){
////                    if ("1".equals(testCJTC.getRunStatus())) {// 只要有失败的用例，则该测试周期执行状态为失败
////                        testCycleRunStatus = 1;// 失败
////                    }
////                    if (!"2".equals(testCJTC.getExecuteStatus())) {// 只要有未执行或者未执行完成，测试周期状态为未完成
////                        testCycleStatus = 1;
////                    }
////                }
////
////
////            } else {// 该测试用例当前步骤执行失败
////                testCycleRunStatus = 1;// 失败
////                for(TestCycleJoinTestCase testCJTC : list){
////                    if (!"2".equals(testCJTC.getExecuteStatus())) {// 只要有未执行或者未执行完成，测试周期状态为未完成
////                        testCycleStatus = 1;
////                    }
////                }
////            }
////            TestCycle testCycle = new TestCycle();
////            testCycle.setId(executeTestCaseDto.getTestCycleId());
////            testCycle.setRunStatus(testCycleRunStatus);
////            testCycle.setStatus(testCycleStatus);
////            testCycle.setLastRunDate(date);
////            testCycle.setUserId(userId);
////            testCycleDao.update(testCycle);
////
////            // 更新测试用例最后执行人，最终执行状态
////            TestCase testCase = new TestCase();
////
////            // 更新测试用例步骤表
////            testCaseStepDao.update(testCaseStep);
////
////
////
////            testCaseDao.update(testCase);
////            testCaseStepDao.update(testCaseStep);
////        }catch (BizException e) {
////            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
////            return new Resp.Builder<String>().buildResult(e.getCode(),e.getMessage());
////        }
////        return Result.updateResult();
//        return Result.updateResult();
//    }


//    /**
//     * 查重
//     */
//    private void verifyIsExist(String title, String projectId) {
//        if (StringUtils.isEmpty(title)) {
//            return;
//        }
//        TestCycle testCycle = new TestCycle();
//        testCycle.setTitle(title);
//        testCycle.setProjectId(projectId);
//        testCycle.setId(null);
//        if (testCycleDao.selectOne(new LambdaQueryWrapper<TestCycle>().eq(TestCycle::getTitle, testCycle.getTitle()).eq(TestCycle::getProjectId, testCycle.getProjectId())) != null) {
//            throw new BizException(SysConstantEnum.DATE_EXIST.getCode(), testCycle.getTitle() + SysConstantEnum.DATE_EXIST.getValue());
//        }
//    }
//
//    /**
//     * 修改字段，进行记录
//     *
//     * @param testCycle
//     */
//    private void modifyRecord(TestCycle testCycle) {
//        try {
//            TestCycle query = testCycleDao.queryById(testCycle.getId(), testCycle.getUserId());
//            if (query == null) {
//                throw new RuntimeException();
//            }
//
//            Field[] fields = testCycle.getClass().getDeclaredFields();
//
//            Field[] fields2 = query.getClass().getDeclaredFields();
//            List<ModifyRecord> modifyRecords = new ArrayList<>();
//            for (int i = 0, len = fields.length; i < len; i++) {
//                String field = fields[i].getName(); //获取字段名
//
//                fields[i].setAccessible(true);
//                fields2[i].setAccessible(true);
//
//                if (field.equals("id")
//                        || field.equals("projectId")
//                        || field.equals("userId")
//                        || field.equals("updateTime")
//                        || field.equals("createTime")
//                        || field.equals("scope")
//                        || field.equals("serialVersionUID")
//                        || field.equals("description")
//                        || fields[i].get(testCycle) == null
//                        || fields[i].get(testCycle) == "") {
//                    continue;
//                }
//
//                String after = fields[i].get(testCycle).toString(); //获取用户需要修改的字段
//                String before = fields2[i].get(query) == null || fields2[i].get(query) == ""
//                        ? "" : fields2[i].get(query).toString();//获取数据库的原有的字段
//
//                //值不相同
//                if (!before.equals(after)) {
//
//                    ModifyRecord mr = new ModifyRecord();
//                    mr.setProjectId(query.getProjectId());
//                    mr.setUserId(query.getUserId());
//                    mr.setScope(OneConstant.SCOPE.ONE_TEST_CYCLE);
//                    mr.setModifyDate(new Date());
//                    mr.setModifyUser(jwtUserService.getUserLoginInfo().getSysUser().getUserName());
//                    mr.setBeforeVal(before);
//                    mr.setAfterVal(after);
//                    mr.setLinkId(query.getId());
//                    mr.setModifyField(getCnField(field));
//                    modifyRecords.add(mr);
//                }
//            }
//            if (modifyRecords.size() <= 0) {
//                return;
//            }
//            modifyRecordsService.insert(modifyRecords);
//        } catch (IllegalAccessException e) {
//            throw new BizException(SysConstantEnum.ADD_FAILED.getCode(), "修改字段新增失败！");
//        }
//    }
//
//
//    /**
//     * 获取字段对应中文字义
//     *
//     * @param args
//     * @return
//     */
//    private String getCnField(String args) {
//        switch (args) {
//            case "title":
//                return "名称";
//            case "runStatus":
//                return "运行状态";
//            case "feature":
//                return "故事";
//            case "status":
//                return "状态";
//            case "lastRunDate":
//                return "最后一次运行时间";
//            case "lastModify":
//                return "最后修改时间";
//            case "featureId":
//                return "关联故事";
//            case "sprintId":
//                return "关联迭代";
//            case "version":
//                return "版本";
//            case "ped":
//                return "ped";
//        }
//        return args;
//    }
//