    @Override
    public Resp<String> activateAccount(ActivateAccountDto activateAccountDto, String activation) {
        if (StringUtils.isEmpty(activateAccountDto.getEmail())) {
            return new Resp.Builder<String>().buildResult(SysConstantEnum.NOT_DETECTED_EMAIL.getCode(), SysConstantEnum.NOT_DETECTED_EMAIL.getValue());
        }
        //检查数据库是否已存在用户
        List<SysUser> sysUsers = sysUserDao.queryByLikeEmail(activateAccountDto.getEmail());
        if (sysUsers.isEmpty()) {
            return new Resp.Builder<String>().buildResult(SysConstantEnum.NOUSER_ERROR.getCode(), SysConstantEnum.NOUSER_ERROR.getValue());
        }
        SysUser sysUser = sysUsers.get(0);
        //申请延期不提示再次输入密码
        if (!activation.equals(OneConstant.PASSWORD.APPLY_FOR_AN_EXTENSION)) {
            if (!activateAccountDto.getPassword().equals(activateAccountDto.getRePassword())) {
                return new Resp.Builder<String>().buildResult(SysConstantEnum.REPASSWORD_ERROR.getCode(), SysConstantEnum.REPASSWORD_ERROR.getValue());
            }
        }

        PasswordCheckerUtil passwordChecker = new PasswordCheckerUtil();
        if (!passwordChecker.check(activateAccountDto.getPassword())) {
            throw new BizException(SysConstantEnum.PASSWORD_RULES.getCode(), SysConstantEnum.PASSWORD_RULES.getValue());
        }

        //激活账号
        if (activation.equals(OneConstant.PASSWORD.ACTIVATION)) {
            sysUser.setActiveState(OneConstant.ACTIVE_STATUS.TRIAL);
            Date activitiDate = new Date(System.currentTimeMillis());
            sysUser.setActivitiDate(activitiDate);
            sysUser.setActivitiNumber(1);
            long time = activitiDate.getTime() + firstTime * 24 * 60 * 60 * 1000;
            sysUser.setExpireDate(new Date(time));
            String userId = sysUser.getId();

            QueryWrapper<SysUserProject> query = Wrappers.query();
            query.eq("user_id", userId);
            List<SysUserProject> userProjects = sysUserProjectDao.selectList(query);
            if (userProjects.isEmpty()) {            

                Project project = new Project();
                project.setUserId(userId);
                project.setTitle("初始化项目");
                project.setStatus("开发中");
                project.setRoomId(sysUser.getRoomId());
                project.setUpdateTime(new Date());
                project.setReportToName(sysUser.getUserName());
                projectService.initProject(project, null);

                SysUserProject sysUserProject = new SysUserProject();
                sysUserProject.setUserId(new BigInteger(userId));
                sysUserProject.setProjectId(new BigInteger(project.getId()));
                sysUserProject.setIsDefault(1);
                sysUserProjectDao.insert(sysUserProject);

                this.initOrder(userId);

                // 2022/11/1 WangYiCheng 设置创始人初始项目的默认function
                RoleFunction roleFunction = roleFunctionDao.queryByRoleId(sysUser.getSysRoleId());

                SysRole sysRole = sysRoleDao.queryById(String.valueOf(sysUser.getSysRoleId()));

                SysUserBusiness sysUserBusiness = new SysUserBusiness();
                sysUserBusiness.setType("RoleFunctions");
                sysUserBusiness.setValue(roleFunction.getCheckFunctionId());
                sysUserBusiness.setInvisible(roleFunction.getInvisibleFunctionId());
                sysUserBusiness.setDeleteFlag("0");
                sysUserBusiness.setUserId(Long.valueOf(sysUser.getId()));
                sysUserBusiness.setUserName(sysUser.getUserName());
                sysUserBusiness.setRoleId(Long.valueOf(sysUser.getSysRoleId()));
                sysUserBusiness.setRoleName(sysRole.getRoleName());

                sysUserBusiness.setProjectId(Long.valueOf(project.getId()));
                sysUserBusiness.setProjectName(project.getTitle());
                sysUserBusinessDao.insertSelective(sysUserBusiness);
            }
        }

        //申请延期
        if (activation.equals(OneConstant.PASSWORD.APPLY_FOR_AN_EXTENSION)) {
            int activitiNumber = sysUser.getActivitiNumber() == null ? 0 : sysUser.getActivitiNumber();
            if (activitiNumber >= 1 && activitiNumber <= 3) {
                final DateTime newExpireDate =
                    cn.hutool.core.date.DateUtil.offsetDay(sysUser.getExpireDate(), 30);
                sysUser.setActivitiNumber(activitiNumber + 1);
                sysUser.setExpireDate(newExpireDate);
            } else {
                throw new BizException(SysConstantEnum.HAS_BEEN_ACTIVATED_ONCE.getCode(), SysConstantEnum.HAS_BEEN_ACTIVATED_ONCE.getValue());
            }
        }
        sysUser.setPassword(encodePassword(activateAccountDto.getPassword()));
        if (sysUserDao.update(sysUser) == 0) {
            throw new BizException(SysConstantEnum.UPDATE_FAILED.getCode(), SysConstantEnum.UPDATE_FAILED.getValue());
        }

        return new Resp.Builder<String>().buildResult(SysConstantEnum.SUCCESS.getCode(), SysConstantEnum.SUCCESS.getValue());
    }